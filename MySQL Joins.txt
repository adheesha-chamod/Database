SQL Joins
=========
* A JOIN clause is used to combine rows from two or more tables, based on a related column between them.


Different Types of SQL JOINs
----------------------------
1. (INNER) JOIN		-> Returns records that have matching values in both tables
2. LEFT (OUTER) JOIN	-> Returns all records from the left table, and the matched records from the right table
3. RIGHT (OUTER) JOIN	-> Returns all records from the right table, and the matched records from the left table
4. FULL (OUTER) JOIN	-> Returns all records when there is a match in either left or right table


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL INNER JOIN
==============

Syntax:
-------
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

* selects records that have matching values in both tables.


Ex:

(Q)
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers
ON Orders.CustomerID = Customers.CustomerID;

* Above SQL statement selects all orders with customer information.
* The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. 
* If there are records in the "Orders" table that do not have matches in "Customers", these orders will not be shown.
* (OrderId or CustomName can't have null values)


(Q)
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers 
ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers 
ON Orders.ShipperID = Shippers.ShipperID);

* Above SQL statement selects all orders with customer and shipper information.
* Join 3 tables


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL LEFT JOIN
==============

Syntax:
-------
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

* Records from the left table (table1), and the matching records from the right table (table2).
* The result is 0 records from the right side, if there is no match.
* In some databases LEFT JOIN is called LEFT OUTER JOIN.


Ex:

(Q)
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

* Above SQL statement will select all customers, and any orders they might have.
* The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).
* (CustomerName can't be null, OrderID can be null)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL RIGHT JOIN
===============

Syntax: (== LEFT JOIN syntax)
-------
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

* Returns all records from the right table (table2), and the matching records from the left table (table1). 
* The result is 0 records from the left side, if there is no match.
* In some databases RIGHT JOIN is called RIGHT OUTER JOIN.


Ex:

(Q)
SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

* Above SQL statement will return all employees, and any orders they might have placed.
* The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).
* (Employee LastName or FirstName can't be null, OrderID can be null)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL FULL OUTER JOIN
===================
* FULL OUTER JOIN is not supported by all SQL database management systems, including MySQL.


Syntax: (not working on MySQL)
-------
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

* Returns all records when there is a match in left (table1) or right (table2) table records.
* FULL OUTER JOIN and FULL JOIN are the same.
* FULL OUTER JOIN can potentially return very large result-sets.


for MySQL:
----------
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name
UNION
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;


Ex:

(Q)
-- not working in mysql
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

* Above SQL statement selects all customers, and all orders
* The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. 
* So, if there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.
* (Null values can be in both sides)


-- for mysql
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
UNION
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL Self Join
=============

Syntax:
-------
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;

* A self join is a regular join, but the table is joined with itself.
* T1 and T2 are different table aliases for the same table.


# Aliases:
	- SQL aliases are used to give a table, or a column in a table, a temporary name.
	- Aliases are often used to make column names more readable.
	- An alias only exists for the duration of that query.
	- An alias is created with the AS keyword.
	- Syntax:
		SELECT column_name AS alias_name
		FROM table_name;


Ex: 

(Q)
SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;

* Above SQL statement matches customers that are from the same city.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SQL UNION Operator
==================
* The UNION operator is used to combine the result-set of two or more SELECT statements.

* Every SELECT statement within UNION must have the same number of columns
* The columns must also have similar data types
* The columns in every SELECT statement must also be in the same order


UNION Syntax:
-------------
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;


UNION ALL Syntax:
-----------------
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;

* The UNION operator selects only distinct values by default.
* To allow duplicate values, use UNION ALL.
* The column names in the result-set are usually equal to the column names in the first SELECT statement.


Ex:

(Q)
SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;

* The above SQL statement returns the cities (only distinct values) from both the "Customers" and the "Suppliers" table.
* If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. 
* Use UNION ALL to also select duplicate values.


(Q)
SELECT City FROM Customers
UNION ALL
SELECT City FROM Suppliers
ORDER BY City;

* The above SQL statement returns the cities (duplicate values also) from both the "Customers" and the "Suppliers" table.


(Q)
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

* The above SQL statement returns the German cities (only distinct values) from both the "Customers" and the "Suppliers" table.


(Q)
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

* The above SQL statement returns the German cities (duplicate values also) from both the "Customers" and the "Suppliers" table.


(Q)
SELECT 'Customer' AS Type, ContactName, City, Country
FROM Customers
UNION
SELECT 'Supplier', ContactName, City, Country
FROM Suppliers;

* The following SQL statement lists all customers and suppliers.


































